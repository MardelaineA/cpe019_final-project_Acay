# -*- coding: utf-8 -*-
"""Untitled9.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ozbATz6_rl_5IldIdKSdWIniDCwf27lh

# Final Exam: Model Deployment in the Cloud
Name: Acay, Mardelaine Jahleel D. <br>
Course and Section: CPE019S3 <br>
Date Submitted: July 11, 2025 <br>
Instructor:Engr. Robin Valenzuela <br>
Date Performed: July 11, 2025
"""

!pip install tensorflow streamlit opencv-python pillow

!pip install kaggle
!mkdir -p ~/.kaggle
!cp /path/to/your/kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json
!kaggle datasets download -d pratik2901/multiclass-weather-dataset
!unzip multiclass-weather-dataset.zip

import os, shutil
from sklearn.model_selection import train_test_split

multiclass_dataset_dir = '/content/drive/MyDrive/CPE 019_FINALS EXAM/archive(1)/Multi-class Weather Dataset' # Corrected directory name
original_dir = '/content/drive/MyDrive/CPE 019_FINALS EXAM/archive(1)'
os.makedirs(original_dir, exist_ok=True)

classes = ['Sunrise', 'Shine', 'Rain', 'Cloudy']

for c in classes:
    os.makedirs(os.path.join(original_dir, 'train', c), exist_ok=True)
    os.makedirs(os.path.join(original_dir, 'test', c), exist_ok=True)

for c in classes:
    src_dir = os.path.join(multiclass_dataset_dir, c)
    all_images = os.listdir(src_dir)
    train_files, test_files = train_test_split(all_images, test_size=0.2, random_state=42)

    for f in train_files:
        shutil.copy(os.path.join(src_dir, f), os.path.join(original_dir, 'train', c, f))
    for f in test_files:
        shutil.copy(os.path.join(src_dir, f), os.path.join(original_dir, 'test', c, f))

from tensorflow.keras.preprocessing.image import ImageDataGenerator
import tensorflow as tf
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

train_path = '/content/drive/MyDrive/CPE 019_FINALS EXAM/archive(1)/train'
test_path = '/content/drive/MyDrive/CPE 019_FINALS EXAM/archive(1)/test'

train_gen = ImageDataGenerator(
    rescale=1./255,
    rotation_range=40,
    zoom_range=0.3,
    width_shift_range=0.2,
    height_shift_range=0.2,
    shear_range=0.2,
    horizontal_flip=True,
    fill_mode='nearest'
)

test_gen = ImageDataGenerator(rescale=1./255)

train_generator = train_gen.flow_from_directory(
    train_path, target_size=(75, 75), batch_size=32, class_mode='categorical')

test_generator = test_gen.flow_from_directory(
    test_path, target_size=(75, 75), batch_size=32, class_mode='categorical')

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(75,75,3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dropout(0.4),
    tf.keras.layers.Dense(4, activation='softmax')
])

model.compile(optimizer='adam', loss='categorical_crossentropy', metrics=['accuracy'])

early_stop = EarlyStopping(monitor='val_accuracy', patience=10, restore_best_weights=True)
checkpoint = ModelCheckpoint("best_model.h5", monitor='val_accuracy', save_best_only=True)

history = model.fit(train_generator, validation_data=test_generator, epochs=50, callbacks=[early_stop, checkpoint])

model.save("Weather multi-class_model.h5")

loss, acc = model.evaluate(test_generator)
print(f"Final Accuracy: {acc * 100:.2f}%")